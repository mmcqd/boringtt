let T = (A : Type) → A → A

let id : T = λ(_)λ(x) x

let Id : (A : Type) → A → A → Type 1 =
λ(A)λ(x)λ(y) (P : A → Type) → P x → P y

let refl : (A : Type) → (x : A) → Id A x x =
λ(_)λ(_)λ(_)λ(Px) Px


let Bool1 = (A : Type 1) → A → A → A

let tt1 : Bool1 = λ(_)λ(x)λ(y) x
let ff1 : Bool1 = λ(_)λ(x)λ(y) y

let Plus : Type → Type → Type 2 =
λ(A)λ(B) (tag : Bool1) × tag Type A B

let inl : (A : Type) → (B : Type) → A → Plus A B =
λ(A)λ(B)λ(a) (tt1 , a)

let inr : (A : Type) → (B : Type) → B → Plus A B =
λ(A)λ(B)λ(b) (ff1 , b)

