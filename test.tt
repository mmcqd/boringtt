let ⊤ = [A : Type] → A → A

let id : ⊤ =
λ[_ x] x

let ⟨⟩ = id

let ⊥ = [A : Type] → A

let ⊎ : Type → Type → Type 2 =
λ[A B] [C : Type] → (A → C) → (B → C) → C

let inj₁ : [A B : Type] → A → ⊎ A B =
λ[_ _ a _ l r] l a

let inj₂ : [A B : Type] → B → ⊎ A B =
λ[_ _ b _ l r] r b

let Id : [A : Type] → A → A → Type 1 =
λ[A x y] [P : A → Type] → P x → P y

let refl : [A : Type] → [x : A] → Id A x x =
λ[_ _ _ x] x

let sym : [A : Type] → [x y : A] → Id A x y → Id A y x =
λ[A x y x≡y P] x≡y (λ[z] P z → P x) (refl A x P)

let trans : [A : Type] → [x y z : A] → Id A x y → Id A y z → Id A x z =
λ[A x y z x≡y y≡z P Px] y≡z P (x≡y P Px)