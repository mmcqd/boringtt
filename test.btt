

let sym [A : Type] [x y : A] [x≡y : Id A x y] : Id A y x =
  match x≡y with
    | refl x => refl _

let trans [A : Type] [x y z : A] [x≡y : Id A x y] [y≡z : Id A y z] : Id A x z =
  (match x≡y at x y _ => Id A y z -> Id A x z with
     | refl _ => λ eq => eq) y≡z


let coerce [A B : Type] [A≡B : Id Type A B] : A -> B =
  match A≡B with
    | refl _ => λ x => x

